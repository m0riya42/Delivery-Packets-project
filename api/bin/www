#!/usr/bin/env node

/**
 * Module dependencies.
 */
// var babel = require('@babel/core')
var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
//const PORT = 8080;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// const io = require("socket.io")(9000, {
//   wsEngine: require("eiows").Server
// });
const STATIC_CHANNELS = ['global_notifications', 'global_chat'];

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`listening on :${port}`));
server.on('error', onError);
server.on('listening', onListening);


/**
 * Listen on Socket.io
 */

var io = require('socket.io')(server, {
  cors: { origin: "*" }
});
io.on('connection', (socket) => { /* socket object may be used to send specific messages to the new connected client */

  socket.on('message', ({ name, message, date }) => {
    io.emit('message', { name, message, date })
    console.log({ name, message, date })
  })
  // console.log(socket)
  // console.log(socket.id); // x8WIv7-mJelg7on_ALbx

  // console.log('new client connected'.green);
  // socket.on("connect_error", (err) => {
  //   console.log(`connect_error due to ${err.message}`);
  // });
  // // socket.emit('connection', null);
  // socket.emit("greetings", "Hey!", { "ms": "jane" }, Buffer.from([4, 3, 3, 1]));
  // socket.on("message", (data) => {
  //   console.log(data);
  // });

  // // // handle the event sent with socket.emit()
  // socket.on("salutations", (elem1, elem2, elem3) => {
  //   console.log(elem1, elem2, elem3);
  // });
  // socket.on('disconnect', function () {
  //   console.log('Client disconnected.');
  // });

});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
